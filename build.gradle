buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        mavenLocal()
        maven {
            url = uri("https://maven.pkg.github.com/wmontwe/gradle-git-version")
            credentials {
                username = project.findProperty("gpr.user")
                password = project.findProperty("gpr.key")
            }
        }
    }
    dependencies {
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.5.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.2.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.6.0'
        classpath 'eu.upwolf.gradle.gitversion:gradle-git-version:0.12.4'
    }
}

plugins {
    id 'com.gradle.plugin-publish' version '0.16.0'
    id 'com.palantir.idea-test-fix' version '0.1.0'
    id 'com.palantir.baseline' version '4.20.0'
    id 'com.palantir.consistent-versions' version '2.0.0'
    id 'java-gradle-plugin'
    id 'groovy'

    id("scripts.publishing-config")
}

apply plugin: 'eu.upwolf.git-version'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.java-format'

group 'eu.upwolf.gradle.gitversion'
version gitVersion()

repositories {
    mavenCentral()
}

sourceSets {
    groovy
    main.output.dir groovy.output
}

dependencies {
    implementation gradleApi()
    implementation 'org.eclipse.jgit:org.eclipse.jgit'
    implementation 'com.google.guava:guava'

    groovyImplementation localGroovy()
    groovyImplementation gradleApi()

    // Access code written in groovy from src/main/java sources
    runtimeOnly configurations.groovyRuntimeClasspath
    implementation configurations.groovyImplementation
    implementation sourceSets.groovy.output
    implementation 'net.swiftzer.semver:semver:1.1.1'

    annotationProcessor 'org.immutables:value'
    compileOnly 'org.immutables:value::annotations'

    testImplementation gradleTestKit()
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'junit:junit'
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine") {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
    testImplementation 'org.assertj:assertj-core'
    testImplementation('org.spockframework:spock-core') {
        exclude module: 'groovy-all'
    }
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
}

java {
    sourceCompatibility JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Werror', '-Xlint:deprecation']
}

pluginBundle {
    website = 'https://github.com/wmontwe/gradle-git-version'
    vcsUrl = 'https://github.com/wmontwe/gradle-git-version'
    description = 'Gradle Git-Version is a plugin that generates a version for use with Gradle by calling git-describe.'
    tags = ['git', 'version']

    plugins {
        gitVersionPlugin {
            id = 'eu.upwolf.git-version'
            displayName = 'Upwolf Gradle Git-Version'
        }
    }
}

tasks.register('printVersionFull') {
    doLast {
        println versionDetails()
    }
}
